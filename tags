!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!DosBatch	l,label	/labels/
!_TAG_KIND_DESCRIPTION!DosBatch	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!GPerf	c,class	/class names/
!_TAG_KIND_DESCRIPTION!GPerf	h,hfunc	/hash function names/
!_TAG_KIND_DESCRIPTION!GPerf	k,keyword	/keywords/
!_TAG_KIND_DESCRIPTION!GPerf	l,lfunc	/lookup function names/
!_TAG_KIND_DESCRIPTION!GPerf	s,strpool	/string pool names/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!DosBatch	0.0	/current.age/
!_TAG_PARSER_VERSION!GPerf	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	W:/converter/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/3e21c2f/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
"(c) "	./code/input.gperf	/^"(c) "$/;"	k
"AESD"	./code/input.gperf	/^"AESD"$/;"	k
"ANNO"	./code/input.gperf	/^"ANNO"$/;"	k
"APPL"	./code/input.gperf	/^"APPL"$/;"	k
"AUTH"	./code/input.gperf	/^"AUTH"$/;"	k
"COMM"	./code/input.gperf	/^"COMM"$/;"	k
"COMT"	./code/input.gperf	/^"COMT"$/;"	k
"FLLR"	./code/input.gperf	/^"FLLR"$/;"	k
"FORM"	./code/input.gperf	/^"FORM"$/;"	k
"INST"	./code/input.gperf	/^"INST"$/;"	k
"MARK"	./code/input.gperf	/^"MARK"$/;"	k
"MIDI"	./code/input.gperf	/^"MIDI"$/;"	k
"NAME"	./code/input.gperf	/^"NAME"$/;"	k
"SSND"	./code/input.gperf	/^"SSND"$/;"	k
AIF_FWD_BACK_LOOP	./code/converter.h	/^#define AIF_FWD_BACK_LOOP /;"	d
AIF_FWD_BACK_LOOP	./release/AifConverter/code/converter.h	/^#define AIF_FWD_BACK_LOOP /;"	d
AIF_FWD_LOOP	./code/converter.h	/^#define AIF_FWD_LOOP /;"	d
AIF_FWD_LOOP	./release/AifConverter/code/converter.h	/^#define AIF_FWD_LOOP /;"	d
AIF_NO_LOOP	./code/converter.h	/^#define AIF_NO_LOOP /;"	d
AIF_NO_LOOP	./release/AifConverter/code/converter.h	/^#define AIF_NO_LOOP /;"	d
ANNOTATION_CHUNK	./code/converter.h	/^    ANNOTATION_CHUNK =		      4,$/;"	e	enum:__anoncbbdc41a0103
ANNOTATION_CHUNK	./release/AifConverter/code/converter.h	/^    ANNOTATION_CHUNK =		      4,$/;"	e	enum:__anon85076c410103
APPLICATION_SPECIFIC_CHUNK	./code/converter.h	/^    APPLICATION_SPECIFIC_CHUNK =      9,$/;"	e	enum:__anoncbbdc41a0103
APPLICATION_SPECIFIC_CHUNK	./release/AifConverter/code/converter.h	/^    APPLICATION_SPECIFIC_CHUNK =      9,$/;"	e	enum:__anon85076c410103
ARENA_BOILERPLATE	./code/converter.h	/^#define ARENA_BOILERPLATE /;"	d
ARENA_BOILERPLATE	./release/AifConverter/code/converter.h	/^#define ARENA_BOILERPLATE /;"	d
AUDIO_RECORDING_CHUNK	./code/converter.h	/^    AUDIO_RECORDING_CHUNK =	     19,$/;"	e	enum:__anoncbbdc41a0103
AUDIO_RECORDING_CHUNK	./release/AifConverter/code/converter.h	/^    AUDIO_RECORDING_CHUNK =	     19,$/;"	e	enum:__anon85076c410103
AUTHOR_CHUNK	./code/converter.h	/^    AUTHOR_CHUNK =		      8,$/;"	e	enum:__anoncbbdc41a0103
AUTHOR_CHUNK	./release/AifConverter/code/converter.h	/^    AUTHOR_CHUNK =		      8,$/;"	e	enum:__anon85076c410103
AdvancePointer	./code/converter.cpp	/^AdvancePointer(uint8 *StartingByte, int32 BytesRead)$/;"	f	typeref:typename:uint8 *
AdvancePointer	./release/AifConverter/code/converter.cpp	/^AdvancePointer(uint8 *StartingByte, int32 BytesRead)$/;"	f	typeref:typename:uint8 *
Aif_Chunk	./code/converter.h	/^    uint8 *Aif_Chunk;$/;"	m	struct:chunk_finder	typeref:typename:uint8 *
Aif_Chunk	./release/AifConverter/code/converter.h	/^    uint8 *Aif_Chunk;$/;"	m	struct:chunk_finder	typeref:typename:uint8 *
Aif_MarkersStart	./code/converter.h	/^    uint8 *Aif_MarkersStart;$/;"	m	struct:conv_marker_chunk	typeref:typename:uint8 *
Aif_MarkersStart	./release/AifConverter/code/converter.h	/^    uint8 *Aif_MarkersStart;$/;"	m	struct:conv_marker_chunk	typeref:typename:uint8 *
Aif_SamplesStart	./code/converter.h	/^    uint8 *Aif_SamplesStart;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:uint8 *
Aif_SamplesStart	./release/AifConverter/code/converter.h	/^    uint8 *Aif_SamplesStart;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:uint8 *
Aif_SubChunksStart	./code/converter.h	/^    uint8 *Aif_SubChunksStart;$/;"	m	struct:conv_form_chunk	typeref:typename:uint8 *
Aif_SubChunksStart	./release/AifConverter/code/converter.h	/^    uint8 *Aif_SubChunksStart;$/;"	m	struct:conv_form_chunk	typeref:typename:uint8 *
AreIDsTheSame	./code/converter.cpp	/^AreIDsTheSame(char *IDToCheck, char *IDToCheckAgainst)$/;"	f	typeref:typename:bool32
AreIDsTheSame	./release/AifConverter/code/converter.cpp	/^AreIDsTheSame(char *IDToCheck, char *IDToCheckAgainst)$/;"	f	typeref:typename:bool32
AreIntsTheSame	./code/converter.cpp	/^AreIntsTheSame(int IntToCheck, int IntToCheckAgainst)$/;"	f	typeref:typename:bool32
AreIntsTheSame	./release/AifConverter/code/converter.cpp	/^AreIntsTheSame(int IntToCheck, int IntToCheckAgainst)$/;"	f	typeref:typename:bool32
ArenaAlloc	./code/converter.cpp	/^ArenaAlloc(uint64 Size)$/;"	f	typeref:typename:arena *
ArenaAlloc	./release/AifConverter/code/converter.cpp	/^ArenaAlloc(uint64 Size)$/;"	f	typeref:typename:arena *
ArenaPush	./code/converter.cpp	/^ArenaPush(arena *Arena, uint64 Size)$/;"	f	typeref:typename:void *
ArenaPush	./release/AifConverter/code/converter.cpp	/^ArenaPush(arena *Arena, uint64 Size)$/;"	f	typeref:typename:void *
ArenaSize	./code/converter.h	/^    uint64 ArenaSize;$/;"	m	struct:arena	typeref:typename:uint64
ArenaSize	./release/AifConverter/code/converter.h	/^    uint64 ArenaSize;$/;"	m	struct:arena	typeref:typename:uint64
ArenaStart	./code/converter.h	/^    uint8 ArenaStart[];$/;"	m	struct:arena	typeref:typename:uint8[]
ArenaStart	./release/AifConverter/code/converter.h	/^    uint8 ArenaStart[];$/;"	m	struct:arena	typeref:typename:uint8[]
ArrayCount	./code/converter.h	/^#define ArrayCount(/;"	d
ArrayCount	./release/AifConverter/code/converter.h	/^#define ArrayCount(/;"	d
Assert	./code/converter.h	/^#define Assert(/;"	d
Assert	./release/AifConverter/code/converter.h	/^#define Assert(/;"	d
AudioFormat	./code/converter.h	/^    uint16 AudioFormat;    \/\/ PCM = 1, others for compression$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
AudioFormat	./release/AifConverter/code/converter.h	/^    uint16 AudioFormat;    \/\/ PCM = 1, others for compression$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
BITS_IN_BYTE	./code/converter.h	/^#define BITS_IN_BYTE /;"	d
BITS_IN_BYTE	./release/AifConverter/code/converter.h	/^#define BITS_IN_BYTE /;"	d
BaseNote	./code/converter.h	/^    int8 BaseNote;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
BaseNote	./code/converter.h	/^    int8 BaseNote;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
BaseNote	./release/AifConverter/code/converter.h	/^    int8 BaseNote;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
BaseNote	./release/AifConverter/code/converter.h	/^    int8 BaseNote;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
BeginLoopMarker	./code/converter.h	/^    int16 BeginLoopMarker;$/;"	m	struct:aif_loop	typeref:typename:int16
BeginLoopMarker	./code/converter.h	/^    int16 BeginLoopMarker;$/;"	m	struct:conv_loop	typeref:typename:int16
BeginLoopMarker	./release/AifConverter/code/converter.h	/^    int16 BeginLoopMarker;$/;"	m	struct:aif_loop	typeref:typename:int16
BeginLoopMarker	./release/AifConverter/code/converter.h	/^    int16 BeginLoopMarker;$/;"	m	struct:conv_loop	typeref:typename:int16
BitsPerSample	./code/converter.h	/^    uint16 BitsPerSample;  \/\/ 8, 16, 24, etc.$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
BitsPerSample	./release/AifConverter/code/converter.h	/^    uint16 BitsPerSample;  \/\/ 8, 16, 24, etc.$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
BlockAlign	./code/converter.h	/^    uint16 BlockAlign;     \/\/ NumChannels * BitsPerSample \/ 8$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
BlockAlign	./release/AifConverter/code/converter.h	/^    uint16 BlockAlign;     \/\/ NumChannels * BitsPerSample \/ 8$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
BlockSize	./code/converter.h	/^    uint32 BlockSize;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:uint32
BlockSize	./code/converter.h	/^    uint32 BlockSize;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:uint32
BlockSize	./release/AifConverter/code/converter.h	/^    uint32 BlockSize;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:uint32
BlockSize	./release/AifConverter/code/converter.h	/^    uint32 BlockSize;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:uint32
ByteRate	./code/converter.h	/^    uint32 ByteRate;       \/\/ SampleRate * NumChannels * BitsPerSample \/ 8$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint32
ByteRate	./release/AifConverter/code/converter.h	/^    uint32 ByteRate;       \/\/ SampleRate * NumChannels * BitsPerSample \/ 8$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint32
CHUNK_HEADER_BOILERPLATE	./code/converter.h	/^#define CHUNK_HEADER_BOILERPLATE /;"	d
CHUNK_HEADER_BOILERPLATE	./release/AifConverter/code/converter.h	/^#define CHUNK_HEADER_BOILERPLATE /;"	d
COMMENT_CHUNK	./code/converter.h	/^    COMMENT_CHUNK =		     10,$/;"	e	enum:__anoncbbdc41a0103
COMMENT_CHUNK	./release/AifConverter/code/converter.h	/^    COMMENT_CHUNK =		     10,$/;"	e	enum:__anon85076c410103
COMMON_CHUNK	./code/converter.h	/^    COMMON_CHUNK =		     15,$/;"	e	enum:__anoncbbdc41a0103
COMMON_CHUNK	./release/AifConverter/code/converter.h	/^    COMMON_CHUNK =		     15,$/;"	e	enum:__anon85076c410103
CONVERTER_H	./code/converter.h	/^#define CONVERTER_H$/;"	d
CONVERTER_H	./release/AifConverter/code/converter.h	/^#define CONVERTER_H$/;"	d
COPYRIGHT_CHUNK	./code/converter.h	/^    COPYRIGHT_CHUNK =		     13,$/;"	e	enum:__anoncbbdc41a0103
COPYRIGHT_CHUNK	./release/AifConverter/code/converter.h	/^    COPYRIGHT_CHUNK =		     13,$/;"	e	enum:__anon85076c410103
ChunkSize	./code/OLD_win32_converter.cpp	/^	    int32 ChunkSize;$/;"	m	struct:WinMain::generic_chunk_header	typeref:typename:int32	file:
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_common_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_form_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_marker_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_common_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_form_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_marker_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:int32
ChunkSize	./code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:generic_chunk_header	typeref:typename:int32
ChunkSize	./code/converter.h	/^    uint32 ChunkSize;         \/\/ Should be 7 bytes$/;"	m	struct:wav_inst_chunk	typeref:typename:uint32
ChunkSize	./code/converter.h	/^    uint32 ChunkSize;      \/\/ Size of the rest of this chunk (typically 16 for PCM)$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint32
ChunkSize	./code/converter.h	/^    uint32 ChunkSize;    \/\/ Number of bytes of sample data$/;"	m	struct:wav_data_chunk	typeref:typename:uint32
ChunkSize	./code/converter.h	/^    uint32 ChunkSize;    \/\/ Size of the entire file minus 8 bytes$/;"	m	struct:wav_riff_chunk	typeref:typename:uint32
ChunkSize	./code/converter.h	/^    uint32 ChunkSize;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_common_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_form_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_marker_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_common_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_form_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_marker_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    int32 ChunkSize;$/;"	m	struct:generic_chunk_header	typeref:typename:int32
ChunkSize	./release/AifConverter/code/converter.h	/^    uint32 ChunkSize;         \/\/ Should be 7 bytes$/;"	m	struct:wav_inst_chunk	typeref:typename:uint32
ChunkSize	./release/AifConverter/code/converter.h	/^    uint32 ChunkSize;      \/\/ Size of the rest of this chunk (typically 16 for PCM)$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint32
ChunkSize	./release/AifConverter/code/converter.h	/^    uint32 ChunkSize;    \/\/ Number of bytes of sample data$/;"	m	struct:wav_data_chunk	typeref:typename:uint32
ChunkSize	./release/AifConverter/code/converter.h	/^    uint32 ChunkSize;    \/\/ Size of the entire file minus 8 bytes$/;"	m	struct:wav_riff_chunk	typeref:typename:uint32
ChunkSize	./release/AifConverter/code/converter.h	/^    uint32 ChunkSize;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Conv_Chunk	./code/converter.h	/^    uint8 *Conv_Chunk;$/;"	m	struct:chunk_finder	typeref:typename:uint8 *
Conv_Chunk	./release/AifConverter/code/converter.h	/^    uint8 *Conv_Chunk;$/;"	m	struct:chunk_finder	typeref:typename:uint8 *
Conv_MarkersStart	./code/converter.h	/^    conv_marker *Conv_MarkersStart;$/;"	m	struct:conv_marker_chunk	typeref:typename:conv_marker *
Conv_MarkersStart	./release/AifConverter/code/converter.h	/^    conv_marker *Conv_MarkersStart;$/;"	m	struct:conv_marker_chunk	typeref:typename:conv_marker *
CopyIDFromAif	./code/converter.cpp	/^CopyIDFromAif(char *StartOfIDToRead, char *ID_Destination)$/;"	f	typeref:typename:void
CopyIDFromAif	./release/AifConverter/code/converter.cpp	/^CopyIDFromAif(char *StartOfIDToRead, char *ID_Destination)$/;"	f	typeref:typename:void
CopyIDToWav	./code/converter.cpp	/^CopyIDToWav(char *StartOfIDToRead, char *ID_Destination)$/;"	f	typeref:typename:void
CopyIDToWav	./release/AifConverter/code/converter.cpp	/^CopyIDToWav(char *StartOfIDToRead, char *ID_Destination)$/;"	f	typeref:typename:void
CuePointID	./code/converter.h	/^    uint32 CuePointID;$/;"	m	struct:wav_sample_loop	typeref:typename:uint32
CuePointID	./release/AifConverter/code/converter.h	/^    uint32 CuePointID;$/;"	m	struct:wav_sample_loop	typeref:typename:uint32
Data	./code/OLD_win32_converter.cpp	/^	    uint8 Data[];$/;"	m	struct:WinMain::generic_chunk_header	typeref:typename:uint8[]	file:
Data	./code/converter.h	/^    uint8 Data[];$/;"	m	struct:generic_chunk_header	typeref:typename:uint8[]
Data	./release/AifConverter/code/converter.h	/^    uint8 Data[];$/;"	m	struct:generic_chunk_header	typeref:typename:uint8[]
DebugPrintDouble	./code/converter.cpp	/^DebugPrintDouble(double d)$/;"	f	typeref:typename:void
DebugPrintDouble	./release/AifConverter/code/converter.cpp	/^DebugPrintDouble(double d)$/;"	f	typeref:typename:void
DebugPrintInt	./code/converter.cpp	/^DebugPrintInt(int i)$/;"	f	typeref:typename:void
DebugPrintInt	./release/AifConverter/code/converter.cpp	/^DebugPrintInt(int i)$/;"	f	typeref:typename:void
DebugPrintString	./code/converter.cpp	/^DebugPrintString(char *s)$/;"	f	typeref:typename:void
DebugPrintString	./release/AifConverter/code/converter.cpp	/^DebugPrintString(char *s)$/;"	f	typeref:typename:void
Detune	./code/converter.h	/^    int8 Detune;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
Detune	./code/converter.h	/^    int8 Detune;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
Detune	./release/AifConverter/code/converter.h	/^    int8 Detune;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
Detune	./release/AifConverter/code/converter.h	/^    int8 Detune;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
DoNotCrossThisLine	./code/converter.h	/^    uint8 *DoNotCrossThisLine;$/;"	m	struct:arena	typeref:typename:uint8 *
DoNotCrossThisLine	./release/AifConverter/code/converter.h	/^    uint8 *DoNotCrossThisLine;$/;"	m	struct:arena	typeref:typename:uint8 *
EXTENDED_WIDTH	./code/converter.h	/^#define EXTENDED_WIDTH /;"	d
EXTENDED_WIDTH	./release/AifConverter/code/converter.h	/^#define EXTENDED_WIDTH /;"	d
End	./code/converter.h	/^    uint32 End;           $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
End	./release/AifConverter/code/converter.h	/^    uint32 End;           $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
EndLoopMarker	./code/converter.h	/^    int16 EndLoopMarker;$/;"	m	struct:aif_loop	typeref:typename:int16
EndLoopMarker	./code/converter.h	/^    int16 EndLoopMarker;$/;"	m	struct:conv_loop	typeref:typename:int16
EndLoopMarker	./release/AifConverter/code/converter.h	/^    int16 EndLoopMarker;$/;"	m	struct:aif_loop	typeref:typename:int16
EndLoopMarker	./release/AifConverter/code/converter.h	/^    int16 EndLoopMarker;$/;"	m	struct:conv_loop	typeref:typename:int16
FILLER_CHUNK	./code/converter.h	/^    FILLER_CHUNK =		     25$/;"	e	enum:__anoncbbdc41a0103
FILLER_CHUNK	./release/AifConverter/code/converter.h	/^    FILLER_CHUNK =		     25$/;"	e	enum:__anon85076c410103
FORM_CHUNK	./code/converter.h	/^    FORM_CHUNK =		     20,$/;"	e	enum:__anoncbbdc41a0103
FORM_CHUNK	./release/AifConverter/code/converter.h	/^    FORM_CHUNK =		     20,$/;"	e	enum:__anon85076c410103
FineTune	./code/converter.h	/^    int8 FineTune;            \/\/ -50 to +50 cents$/;"	m	struct:wav_inst_chunk	typeref:typename:int8
FineTune	./release/AifConverter/code/converter.h	/^    int8 FineTune;            \/\/ -50 to +50 cents$/;"	m	struct:wav_inst_chunk	typeref:typename:int8
FlipEndianness	./code/converter.cpp	/^FlipEndianness(int16 IntToFlip)$/;"	f	typeref:typename:int16
FlipEndianness	./code/converter.cpp	/^FlipEndianness(int32 IntToFlip)$/;"	f	typeref:typename:int32
FlipEndianness	./code/converter.cpp	/^FlipEndianness(uint16 IntToFlip)$/;"	f	typeref:typename:uint16
FlipEndianness	./code/converter.cpp	/^FlipEndianness(uint32 IntToFlip)$/;"	f	typeref:typename:uint32
FlipEndianness	./release/AifConverter/code/converter.cpp	/^FlipEndianness(int16 IntToFlip)$/;"	f	typeref:typename:int16
FlipEndianness	./release/AifConverter/code/converter.cpp	/^FlipEndianness(int32 IntToFlip)$/;"	f	typeref:typename:int32
FlipEndianness	./release/AifConverter/code/converter.cpp	/^FlipEndianness(uint16 IntToFlip)$/;"	f	typeref:typename:uint16
FlipEndianness	./release/AifConverter/code/converter.cpp	/^FlipEndianness(uint32 IntToFlip)$/;"	f	typeref:typename:uint32
FlipSampleEndianness16Bits	./code/converter.cpp	/^FlipSampleEndianness16Bits(conv_common_chunk *CommonChunk, uint8 *LittleEndianSamplesStart, $/;"	f	typeref:typename:int
FlipSampleEndianness16Bits	./release/AifConverter/code/converter.cpp	/^FlipSampleEndianness16Bits(conv_common_chunk *CommonChunk, uint8 *LittleEndianSamplesStart, $/;"	f	typeref:typename:int
FlipSampleEndianness24Bits	./code/converter.cpp	/^FlipSampleEndianness24Bits(conv_common_chunk *CommonChunk, uint8 *LittleEndianSamplesStart, $/;"	f	typeref:typename:int
FlipSampleEndianness24Bits	./release/AifConverter/code/converter.cpp	/^FlipSampleEndianness24Bits(conv_common_chunk *CommonChunk, uint8 *LittleEndianSamplesStart, $/;"	f	typeref:typename:int
FolderType	./data/desktop.ini	/^FolderType=Generic$/;"	k	section:ViewState
FormType	./code/converter.h	/^    char FormType[ID_WIDTH + 1];$/;"	m	struct:conv_form_chunk	typeref:typename:char[]
FormType	./code/converter.h	/^    char FormType[ID_WIDTH];$/;"	m	struct:aif_form_chunk	typeref:typename:char[]
FormType	./release/AifConverter/code/converter.h	/^    char FormType[ID_WIDTH + 1];$/;"	m	struct:conv_form_chunk	typeref:typename:char[]
FormType	./release/AifConverter/code/converter.h	/^    char FormType[ID_WIDTH];$/;"	m	struct:aif_form_chunk	typeref:typename:char[]
Format	./code/converter.h	/^    char Format[4];      \/\/ 'WAVE'$/;"	m	struct:wav_riff_chunk	typeref:typename:char[4]
Format	./release/AifConverter/code/converter.h	/^    char Format[4];      \/\/ 'WAVE'$/;"	m	struct:wav_riff_chunk	typeref:typename:char[4]
Fraction	./code/converter.h	/^    uint32 Fraction;$/;"	m	struct:wav_sample_loop	typeref:typename:uint32
Fraction	./release/AifConverter/code/converter.h	/^    uint32 Fraction;$/;"	m	struct:wav_sample_loop	typeref:typename:uint32
GPerfHasher	./code/GperfHash.c	/^GPerfHasher (register const char *str, register size_t len)$/;"	f	typeref:typename:unsigned int
GPerfHasher	./code/input.gperf	/^%define hash-function-name GPerfHasher$/;"	h
GPerfHasher	./release/AifConverter/code/GperfHash.c	/^GPerfHasher (register const char *str, register size_t len)$/;"	f	typeref:typename:unsigned int
GPerfIDLookup	./code/GperfHash.c	/^GPerfIDLookup (register const char *str, register size_t len)$/;"	f	typeref:typename:const char *
GPerfIDLookup	./code/input.gperf	/^%define lookup-function-name GPerfIDLookup$/;"	l
GPerfIDLookup	./release/AifConverter/code/GperfHash.c	/^GPerfIDLookup (register const char *str, register size_t len)$/;"	f	typeref:typename:const char *
Gain	./code/converter.h	/^    int16 Gain;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int16
Gain	./code/converter.h	/^    int16 Gain;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int16
Gain	./code/converter.h	/^    int8 Gain;                \/\/ -64 to +64 dB$/;"	m	struct:wav_inst_chunk	typeref:typename:int8
Gain	./release/AifConverter/code/converter.h	/^    int16 Gain;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int16
Gain	./release/AifConverter/code/converter.h	/^    int16 Gain;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int16
Gain	./release/AifConverter/code/converter.h	/^    int8 Gain;                \/\/ -64 to +64 dB$/;"	m	struct:wav_inst_chunk	typeref:typename:int8
GetConvertedChunkPointer	./code/converter.cpp	/^GetConvertedChunkPointer(chunk Chunk)$/;"	f	typeref:typename:void *
GetConvertedChunkPointer	./release/AifConverter/code/converter.cpp	/^GetConvertedChunkPointer(chunk Chunk)$/;"	f	typeref:typename:void *
GetSampleFramePosition	./code/converter.cpp	/^GetSampleFramePosition(int16 IDForDesiredMarker, conv_marker_chunk *Conv_MarkerChunk)$/;"	f	typeref:typename:uint32
GetSampleFramePosition	./release/AifConverter/code/converter.cpp	/^GetSampleFramePosition(int16 IDForDesiredMarker, conv_marker_chunk *Conv_MarkerChunk)$/;"	f	typeref:typename:uint32
GetSampleRate	./code/converter.cpp	/^GetSampleRate(uint8 *FirstByteOfExtendedPrecisionFloat)$/;"	f	typeref:typename:uint32
GetSampleRate	./release/AifConverter/code/converter.cpp	/^GetSampleRate(uint8 *FirstByteOfExtendedPrecisionFloat)$/;"	f	typeref:typename:uint32
Global_BytesNeededForWav	./code/win32_converter.cpp	/^uint32 Global_BytesNeededForWav = 0;$/;"	v	typeref:typename:uint32
Global_BytesNeededForWav	./release/AifConverter/code/win32_converter.cpp	/^uint32 Global_BytesNeededForWav = 0;$/;"	v	typeref:typename:uint32
Global_CountOfUnimportantChunks	./code/win32_converter.cpp	/^int    Global_CountOfUnimportantChunks = 0;$/;"	v	typeref:typename:int
Global_CountOfUnimportantChunks	./release/AifConverter/code/win32_converter.cpp	/^int    Global_CountOfUnimportantChunks = 0;$/;"	v	typeref:typename:int
Global_NumSampleLoops	./code/win32_converter.cpp	/^int    Global_NumSampleLoops = 0;$/;"	v	typeref:typename:int
Global_NumSampleLoops	./release/AifConverter/code/win32_converter.cpp	/^int    Global_NumSampleLoops = 0;$/;"	v	typeref:typename:int
Global_UnChunkDirectory	./code/win32_converter.cpp	/^chunk_finder *Global_UnChunkDirectory = 0;$/;"	v	typeref:typename:chunk_finder *
Global_UnChunkDirectory	./release/AifConverter/code/win32_converter.cpp	/^chunk_finder *Global_UnChunkDirectory = 0;$/;"	v	typeref:typename:chunk_finder *
HASHED_CHUNK_ID_ARRAY_SIZE	./code/converter.h	/^#define HASHED_CHUNK_ID_ARRAY_SIZE /;"	d
HASHED_CHUNK_ID_ARRAY_SIZE	./release/AifConverter/code/converter.h	/^#define HASHED_CHUNK_ID_ARRAY_SIZE /;"	d
HashedID	./code/converter.h	/^    chunk HashedID;$/;"	m	struct:chunk_finder	typeref:typename:chunk
HashedID	./release/AifConverter/code/converter.h	/^    chunk HashedID;$/;"	m	struct:chunk_finder	typeref:typename:chunk
HighNote	./code/converter.h	/^    int8 HighNote;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
HighNote	./code/converter.h	/^    int8 HighNote;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
HighNote	./code/converter.h	/^    uint8 HighNote;           \/\/ Highest note played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
HighNote	./release/AifConverter/code/converter.h	/^    int8 HighNote;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
HighNote	./release/AifConverter/code/converter.h	/^    int8 HighNote;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
HighNote	./release/AifConverter/code/converter.h	/^    uint8 HighNote;           \/\/ Highest note played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
HighVelocity	./code/converter.h	/^    int8 HighVelocity;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
HighVelocity	./code/converter.h	/^    int8 HighVelocity;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
HighVelocity	./code/converter.h	/^    uint8 HighVelocity;       \/\/ Highest velocity played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
HighVelocity	./release/AifConverter/code/converter.h	/^    int8 HighVelocity;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
HighVelocity	./release/AifConverter/code/converter.h	/^    int8 HighVelocity;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
HighVelocity	./release/AifConverter/code/converter.h	/^    uint8 HighVelocity;       \/\/ Highest velocity played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
ID	./code/OLD_win32_converter.cpp	/^	    char ID[ID_WIDTH];$/;"	m	struct:WinMain::generic_chunk_header	typeref:typename:char[]	file:
ID	./code/converter.h	/^    char ID[4];               \/\/ 'inst'$/;"	m	struct:wav_inst_chunk	typeref:typename:char[4]
ID	./code/converter.h	/^    char ID[4];            \/\/ 'fmt '$/;"	m	struct:wav_fmt_chunk	typeref:typename:char[4]
ID	./code/converter.h	/^    char ID[4];          \/\/ 'RIFF'$/;"	m	struct:wav_riff_chunk	typeref:typename:char[4]
ID	./code/converter.h	/^    char ID[4];          \/\/ 'data'$/;"	m	struct:wav_data_chunk	typeref:typename:char[4]
ID	./code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_common_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_form_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_instrument_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_marker_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_sound_data_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:filler_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_common_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_form_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_instrument_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_marker_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_sound_data_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:generic_chunk_header	typeref:typename:char[]
ID	./code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:wav_sampler_chunk	typeref:typename:char[]
ID	./code/converter.h	/^    int16 ID; \/\/ For some reason .aif uses "ID" to refer to the unique$/;"	m	struct:conv_marker	typeref:typename:int16
ID	./code/converter.h	/^    int16 ID;$/;"	m	struct:aif_marker	typeref:typename:int16
ID	./release/AifConverter/code/converter.h	/^    char ID[4];               \/\/ 'inst'$/;"	m	struct:wav_inst_chunk	typeref:typename:char[4]
ID	./release/AifConverter/code/converter.h	/^    char ID[4];            \/\/ 'fmt '$/;"	m	struct:wav_fmt_chunk	typeref:typename:char[4]
ID	./release/AifConverter/code/converter.h	/^    char ID[4];          \/\/ 'RIFF'$/;"	m	struct:wav_riff_chunk	typeref:typename:char[4]
ID	./release/AifConverter/code/converter.h	/^    char ID[4];          \/\/ 'data'$/;"	m	struct:wav_data_chunk	typeref:typename:char[4]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_common_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_form_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_instrument_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_marker_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:conv_sound_data_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:filler_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_common_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_form_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_instrument_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_marker_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:aif_sound_data_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:generic_chunk_header	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    char ID[ID_WIDTH];$/;"	m	struct:wav_sampler_chunk	typeref:typename:char[]
ID	./release/AifConverter/code/converter.h	/^    int16 ID; \/\/ For some reason .aif uses "ID" to refer to the unique$/;"	m	struct:conv_marker	typeref:typename:int16
ID	./release/AifConverter/code/converter.h	/^    int16 ID;$/;"	m	struct:aif_marker	typeref:typename:int16
ID_WIDTH	./code/converter.h	/^#define ID_WIDTH /;"	d
ID_WIDTH	./release/AifConverter/code/converter.h	/^#define ID_WIDTH /;"	d
INSTRUMENT_CHUNK	./code/converter.h	/^    INSTRUMENT_CHUNK =		      0,$/;"	e	enum:__anoncbbdc41a0103
INSTRUMENT_CHUNK	./release/AifConverter/code/converter.h	/^    INSTRUMENT_CHUNK =		      0,$/;"	e	enum:__anon85076c410103
Kilobytes	./code/converter.h	/^#define Kilobytes(NumKilobytes) ((NumKilobytes)/;"	d
Kilobytes	./release/AifConverter/code/converter.h	/^#define Kilobytes(NumKilobytes) ((NumKilobytes)/;"	d
LowNote	./code/converter.h	/^    int8 LowNote;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
LowNote	./code/converter.h	/^    int8 LowNote;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
LowNote	./code/converter.h	/^    uint8 LowNote;            \/\/ Lowest note played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
LowNote	./release/AifConverter/code/converter.h	/^    int8 LowNote;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
LowNote	./release/AifConverter/code/converter.h	/^    int8 LowNote;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
LowNote	./release/AifConverter/code/converter.h	/^    uint8 LowNote;            \/\/ Lowest note played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
LowVelocity	./code/converter.h	/^    int8 LowVelocity;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
LowVelocity	./code/converter.h	/^    int8 LowVelocity;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
LowVelocity	./code/converter.h	/^    uint8 LowVelocity;        \/\/ Lowest velocity played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
LowVelocity	./release/AifConverter/code/converter.h	/^    int8 LowVelocity;$/;"	m	struct:aif_instrument_chunk	typeref:typename:int8
LowVelocity	./release/AifConverter/code/converter.h	/^    int8 LowVelocity;$/;"	m	struct:conv_instrument_chunk	typeref:typename:int8
LowVelocity	./release/AifConverter/code/converter.h	/^    uint8 LowVelocity;        \/\/ Lowest velocity played$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
MARKER_BOILERPLATE	./code/converter.h	/^#define MARKER_BOILERPLATE /;"	d
MARKER_BOILERPLATE	./release/AifConverter/code/converter.h	/^#define MARKER_BOILERPLATE /;"	d
MARKER_CHUNK	./code/converter.h	/^    MARKER_CHUNK =		     14,$/;"	e	enum:__anoncbbdc41a0103
MARKER_CHUNK	./release/AifConverter/code/converter.h	/^    MARKER_CHUNK =		     14,$/;"	e	enum:__anon85076c410103
MAX_HASH_VALUE	./code/GperfHash.c	/^#define MAX_HASH_VALUE /;"	d	file:
MAX_HASH_VALUE	./release/AifConverter/code/GperfHash.c	/^#define MAX_HASH_VALUE /;"	d	file:
MAX_LOOP_CHUNKS	./code/converter.h	/^#define MAX_LOOP_CHUNKS /;"	d
MAX_LOOP_CHUNKS	./release/AifConverter/code/converter.h	/^#define MAX_LOOP_CHUNKS /;"	d
MAX_STRING_LEN	./code/converter.h	/^#define MAX_STRING_LEN /;"	d
MAX_STRING_LEN	./release/AifConverter/code/converter.h	/^#define MAX_STRING_LEN /;"	d
MAX_UNIMPORTANT_CHUNKS	./code/converter.cpp	/^#define MAX_UNIMPORTANT_CHUNKS /;"	d	file:
MAX_UNIMPORTANT_CHUNKS	./release/AifConverter/code/converter.cpp	/^#define MAX_UNIMPORTANT_CHUNKS /;"	d	file:
MAX_WORD_LENGTH	./code/GperfHash.c	/^#define MAX_WORD_LENGTH /;"	d	file:
MAX_WORD_LENGTH	./release/AifConverter/code/GperfHash.c	/^#define MAX_WORD_LENGTH /;"	d	file:
MIDI_CHUNK	./code/converter.h	/^    MIDI_CHUNK =		      5,$/;"	e	enum:__anoncbbdc41a0103
MIDI_CHUNK	./release/AifConverter/code/converter.h	/^    MIDI_CHUNK =		      5,$/;"	e	enum:__anon85076c410103
MIN_HASH_VALUE	./code/GperfHash.c	/^#define MIN_HASH_VALUE /;"	d	file:
MIN_HASH_VALUE	./release/AifConverter/code/GperfHash.c	/^#define MIN_HASH_VALUE /;"	d	file:
MIN_WORD_LENGTH	./code/GperfHash.c	/^#define MIN_WORD_LENGTH /;"	d	file:
MIN_WORD_LENGTH	./release/AifConverter/code/GperfHash.c	/^#define MIN_WORD_LENGTH /;"	d	file:
Manufacturer	./code/converter.h	/^    uint32 Manufacturer;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Manufacturer	./release/AifConverter/code/converter.h	/^    uint32 Manufacturer;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
MarkerNameLen	./code/converter.h	/^    uint8 MarkerNameLen;$/;"	m	struct:aif_marker	typeref:typename:uint8
MarkerNameLen	./code/converter.h	/^    uint8 MarkerNameLen;$/;"	m	struct:conv_marker	typeref:typename:uint8
MarkerNameLen	./release/AifConverter/code/converter.h	/^    uint8 MarkerNameLen;$/;"	m	struct:aif_marker	typeref:typename:uint8
MarkerNameLen	./release/AifConverter/code/converter.h	/^    uint8 MarkerNameLen;$/;"	m	struct:conv_marker	typeref:typename:uint8
MarkerNameStart	./code/converter.h	/^    uint8 *MarkerNameStart;$/;"	m	struct:conv_marker	typeref:typename:uint8 *
MarkerNameStart	./code/converter.h	/^    uint8 MarkerNameStart;$/;"	m	struct:aif_marker	typeref:typename:uint8
MarkerNameStart	./release/AifConverter/code/converter.h	/^    uint8 *MarkerNameStart;$/;"	m	struct:conv_marker	typeref:typename:uint8 *
MarkerNameStart	./release/AifConverter/code/converter.h	/^    uint8 MarkerNameStart;$/;"	m	struct:aif_marker	typeref:typename:uint8
MarkersStart	./code/converter.h	/^    uint8 MarkersStart;$/;"	m	struct:aif_marker_chunk	typeref:typename:uint8
MarkersStart	./release/AifConverter/code/converter.h	/^    uint8 MarkersStart;$/;"	m	struct:aif_marker_chunk	typeref:typename:uint8
Megabytes	./code/converter.h	/^#define Megabytes(NumMegabytes) ((Kilobytes((NumMegabytes)/;"	d
Megabytes	./release/AifConverter/code/converter.h	/^#define Megabytes(NumMegabytes) ((Kilobytes((NumMegabytes)/;"	d
MidiPitchFraction	./code/converter.h	/^    uint32 MidiPitchFraction;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
MidiPitchFraction	./release/AifConverter/code/converter.h	/^    uint32 MidiPitchFraction;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
MidiUnityNote	./code/converter.h	/^    uint32 MidiUnityNote;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
MidiUnityNote	./release/AifConverter/code/converter.h	/^    uint32 MidiUnityNote;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Mode	./data/desktop.ini	/^Mode=$/;"	k	section:ViewState
NAME_CHUNK	./code/converter.h	/^    NAME_CHUNK =		     24,$/;"	e	enum:__anoncbbdc41a0103
NAME_CHUNK	./release/AifConverter/code/converter.h	/^    NAME_CHUNK =		     24,$/;"	e	enum:__anon85076c410103
NextFreeByte	./code/converter.h	/^    uint8 *NextFreeByte;$/;"	m	struct:arena	typeref:typename:uint8 *
NextFreeByte	./release/AifConverter/code/converter.h	/^    uint8 *NextFreeByte;$/;"	m	struct:arena	typeref:typename:uint8 *
NumChannels	./code/converter.h	/^    int16 NumChannels;$/;"	m	struct:aif_common_chunk	typeref:typename:int16
NumChannels	./code/converter.h	/^    int16 NumChannels;$/;"	m	struct:conv_common_chunk	typeref:typename:int16
NumChannels	./code/converter.h	/^    uint16 NumChannels;    \/\/ Mono = 1, Stereo = 2, etc.$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
NumChannels	./release/AifConverter/code/converter.h	/^    int16 NumChannels;$/;"	m	struct:aif_common_chunk	typeref:typename:int16
NumChannels	./release/AifConverter/code/converter.h	/^    int16 NumChannels;$/;"	m	struct:conv_common_chunk	typeref:typename:int16
NumChannels	./release/AifConverter/code/converter.h	/^    uint16 NumChannels;    \/\/ Mono = 1, Stereo = 2, etc.$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint16
NumPointlessMarkers	./code/converter.h	/^    int NumPointlessMarkers;$/;"	m	struct:conv_marker_chunk	typeref:typename:int
NumPointlessMarkers	./release/AifConverter/code/converter.h	/^    int NumPointlessMarkers;$/;"	m	struct:conv_marker_chunk	typeref:typename:int
NumSampleFrames	./code/converter.h	/^    uint32 NumSampleFrames;$/;"	m	struct:aif_common_chunk	typeref:typename:uint32
NumSampleFrames	./code/converter.h	/^    uint32 NumSampleFrames;$/;"	m	struct:conv_common_chunk	typeref:typename:uint32
NumSampleFrames	./release/AifConverter/code/converter.h	/^    uint32 NumSampleFrames;$/;"	m	struct:aif_common_chunk	typeref:typename:uint32
NumSampleFrames	./release/AifConverter/code/converter.h	/^    uint32 NumSampleFrames;$/;"	m	struct:conv_common_chunk	typeref:typename:uint32
NumSampleLoops	./code/converter.h	/^    uint32 NumSampleLoops;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
NumSampleLoops	./release/AifConverter/code/converter.h	/^    uint32 NumSampleLoops;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Offset	./code/converter.h	/^    uint32 Offset;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:uint32
Offset	./code/converter.h	/^    uint32 Offset;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:uint32
Offset	./release/AifConverter/code/converter.h	/^    uint32 Offset;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:uint32
Offset	./release/AifConverter/code/converter.h	/^    uint32 Offset;$/;"	m	struct:conv_sound_data_chunk	typeref:typename:uint32
PadByte	./code/converter.h	/^    uint8 PadByte;$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
PadByte	./release/AifConverter/code/converter.h	/^    uint8 PadByte;$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
ParseCommonChunk	./code/converter.cpp	/^ParseCommonChunk(uint8 *Aif_CommonChunk_Start, conv_common_chunk *Conv_CommonChunk)$/;"	f	typeref:typename:void
ParseCommonChunk	./release/AifConverter/code/converter.cpp	/^ParseCommonChunk(uint8 *Aif_CommonChunk_Start, conv_common_chunk *Conv_CommonChunk)$/;"	f	typeref:typename:void
ParseFillerChunk	./code/converter.cpp	/^ParseFillerChunk(uint8 *Aif_FillerChunk_Start, filler_chunk *FillerChunk)$/;"	f	typeref:typename:int
ParseFillerChunk	./release/AifConverter/code/converter.cpp	/^ParseFillerChunk(uint8 *Aif_FillerChunk_Start, filler_chunk *FillerChunk)$/;"	f	typeref:typename:int
ParseFormChunk	./code/converter.cpp	/^ParseFormChunk(uint8 *Aif_FormChunk_Start, $/;"	f	typeref:typename:void
ParseFormChunk	./release/AifConverter/code/converter.cpp	/^ParseFormChunk(uint8 *Aif_FormChunk_Start, $/;"	f	typeref:typename:void
ParseInstrumentChunk	./code/converter.cpp	/^ParseInstrumentChunk(uint8 *Aif_InstrumentChunk_Start, conv_instrument_chunk *Conv_InstrumentChu/;"	f	typeref:typename:int
ParseInstrumentChunk	./release/AifConverter/code/converter.cpp	/^ParseInstrumentChunk(uint8 *Aif_InstrumentChunk_Start, conv_instrument_chunk *Conv_InstrumentChu/;"	f	typeref:typename:int
ParseMarkerChunk	./code/converter.cpp	/^ParseMarkerChunk(uint8 *Aif_MarkerChunk_Start, conv_marker_chunk *Conv_MarkerChunk)$/;"	f	typeref:typename:void
ParseMarkerChunk	./release/AifConverter/code/converter.cpp	/^ParseMarkerChunk(uint8 *Aif_MarkerChunk_Start, conv_marker_chunk *Conv_MarkerChunk)$/;"	f	typeref:typename:void
ParseMarkers	./code/converter.cpp	/^ParseMarkers(conv_marker_chunk *Conv_MarkerChunk, $/;"	f	typeref:typename:void
ParseMarkers	./release/AifConverter/code/converter.cpp	/^ParseMarkers(conv_marker_chunk *Conv_MarkerChunk, $/;"	f	typeref:typename:void
ParseSoundDataChunk	./code/converter.cpp	/^ParseSoundDataChunk(uint8 *Aif_SoundDataChunk_Start, conv_sound_data_chunk *Conv_SoundDataChunk)$/;"	f	typeref:typename:void
ParseSoundDataChunk	./release/AifConverter/code/converter.cpp	/^ParseSoundDataChunk(uint8 *Aif_SoundDataChunk_Start, conv_sound_data_chunk *Conv_SoundDataChunk)$/;"	f	typeref:typename:void
PlayCount	./code/converter.h	/^    uint32 PlayCount;     $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
PlayCount	./release/AifConverter/code/converter.h	/^    uint32 PlayCount;     $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
PlayMode	./code/converter.h	/^    int16 PlayMode;$/;"	m	struct:aif_loop	typeref:typename:int16
PlayMode	./code/converter.h	/^    int16 PlayMode;$/;"	m	struct:conv_loop	typeref:typename:int16
PlayMode	./release/AifConverter/code/converter.h	/^    int16 PlayMode;$/;"	m	struct:aif_loop	typeref:typename:int16
PlayMode	./release/AifConverter/code/converter.h	/^    int16 PlayMode;$/;"	m	struct:conv_loop	typeref:typename:int16
Position	./code/converter.h	/^    uint32 Position;$/;"	m	struct:aif_marker	typeref:typename:uint32
Position	./code/converter.h	/^    uint32 Position;$/;"	m	struct:conv_marker	typeref:typename:uint32
Position	./release/AifConverter/code/converter.h	/^    uint32 Position;$/;"	m	struct:aif_marker	typeref:typename:uint32
Position	./release/AifConverter/code/converter.h	/^    uint32 Position;$/;"	m	struct:conv_marker	typeref:typename:uint32
Product	./code/converter.h	/^    uint32 Product;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Product	./release/AifConverter/code/converter.h	/^    uint32 Product;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
PushArray	./code/converter.cpp	/^#define PushArray(/;"	d	file:
PushArray	./release/AifConverter/code/converter.cpp	/^#define PushArray(/;"	d	file:
PushStruct	./code/converter.cpp	/^#define PushStruct(/;"	d	file:
PushStruct	./release/AifConverter/code/converter.cpp	/^#define PushStruct(/;"	d	file:
ReleaseLoop	./code/converter.h	/^    aif_loop ReleaseLoop;$/;"	m	struct:aif_instrument_chunk	typeref:typename:aif_loop
ReleaseLoop	./code/converter.h	/^    conv_loop ReleaseLoop;$/;"	m	struct:conv_instrument_chunk	typeref:typename:conv_loop
ReleaseLoop	./release/AifConverter/code/converter.h	/^    aif_loop ReleaseLoop;$/;"	m	struct:aif_instrument_chunk	typeref:typename:aif_loop
ReleaseLoop	./release/AifConverter/code/converter.h	/^    conv_loop ReleaseLoop;$/;"	m	struct:conv_instrument_chunk	typeref:typename:conv_loop
SOUND_DATA_CHUNK	./code/converter.h	/^    SOUND_DATA_CHUNK =		     30,$/;"	e	enum:__anoncbbdc41a0103
SOUND_DATA_CHUNK	./release/AifConverter/code/converter.h	/^    SOUND_DATA_CHUNK =		     30,$/;"	e	enum:__anon85076c410103
SamplePeriod	./code/converter.h	/^    uint32 SamplePeriod;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
SamplePeriod	./release/AifConverter/code/converter.h	/^    uint32 SamplePeriod;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
SampleRate	./code/converter.h	/^    uint32 SampleRate;     \/\/ 44100, 48000, etc.$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint32
SampleRate	./code/converter.h	/^    uint32 SampleRate;$/;"	m	struct:aif_common_chunk	typeref:typename:uint32
SampleRate	./code/converter.h	/^    uint32 SampleRate;$/;"	m	struct:conv_common_chunk	typeref:typename:uint32
SampleRate	./release/AifConverter/code/converter.h	/^    uint32 SampleRate;     \/\/ 44100, 48000, etc.$/;"	m	struct:wav_fmt_chunk	typeref:typename:uint32
SampleRate	./release/AifConverter/code/converter.h	/^    uint32 SampleRate;$/;"	m	struct:aif_common_chunk	typeref:typename:uint32
SampleRate	./release/AifConverter/code/converter.h	/^    uint32 SampleRate;$/;"	m	struct:conv_common_chunk	typeref:typename:uint32
SampleSize	./code/converter.h	/^    int16 SampleSize;$/;"	m	struct:aif_common_chunk	typeref:typename:int16
SampleSize	./code/converter.h	/^    int16 SampleSize;$/;"	m	struct:conv_common_chunk	typeref:typename:int16
SampleSize	./release/AifConverter/code/converter.h	/^    int16 SampleSize;$/;"	m	struct:aif_common_chunk	typeref:typename:int16
SampleSize	./release/AifConverter/code/converter.h	/^    int16 SampleSize;$/;"	m	struct:conv_common_chunk	typeref:typename:int16
SamplerData	./code/converter.h	/^    uint32 SamplerData;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
SamplerData	./release/AifConverter/code/converter.h	/^    uint32 SamplerData;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Samples	./code/converter.h	/^    uint8 Samples[];$/;"	m	struct:wav_data_chunk	typeref:typename:uint8[]
Samples	./release/AifConverter/code/converter.h	/^    uint8 Samples[];$/;"	m	struct:wav_data_chunk	typeref:typename:uint8[]
SamplesStart	./code/converter.h	/^    uint8 SamplesStart;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:uint8
SamplesStart	./release/AifConverter/code/converter.h	/^    uint8 SamplesStart;$/;"	m	struct:aif_sound_data_chunk	typeref:typename:uint8
SmpteFormat	./code/converter.h	/^    uint32 SmpteFormat;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
SmpteFormat	./release/AifConverter/code/converter.h	/^    uint32 SmpteFormat;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
SmpteOffset	./code/converter.h	/^    uint32 SmpteOffset;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
SmpteOffset	./release/AifConverter/code/converter.h	/^    uint32 SmpteOffset;$/;"	m	struct:wav_sampler_chunk	typeref:typename:uint32
Start	./code/converter.h	/^    uint32 Start;         $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
Start	./release/AifConverter/code/converter.h	/^    uint32 Start;         $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
SteenCopy	./code/converter.cpp	/^SteenCopy(uint8 *MemToCopy, uint8 *MemDestination, int BytesToCopy)$/;"	f	typeref:typename:int
SteenCopy	./release/AifConverter/code/converter.cpp	/^SteenCopy(uint8 *MemToCopy, uint8 *MemDestination, int BytesToCopy)$/;"	f	typeref:typename:int
Stringize	./code/converter.h	/^#define Stringize(/;"	d
Stringize	./release/AifConverter/code/converter.h	/^#define Stringize(/;"	d
SubChunksStart	./code/converter.h	/^    uint8 SubChunksStart;$/;"	m	struct:aif_form_chunk	typeref:typename:uint8
SubChunksStart	./release/AifConverter/code/converter.h	/^    uint8 SubChunksStart;$/;"	m	struct:aif_form_chunk	typeref:typename:uint8
SustainLoop	./code/converter.h	/^    aif_loop SustainLoop;$/;"	m	struct:aif_instrument_chunk	typeref:typename:aif_loop
SustainLoop	./code/converter.h	/^    conv_loop SustainLoop;$/;"	m	struct:conv_instrument_chunk	typeref:typename:conv_loop
SustainLoop	./release/AifConverter/code/converter.h	/^    aif_loop SustainLoop;$/;"	m	struct:aif_instrument_chunk	typeref:typename:aif_loop
SustainLoop	./release/AifConverter/code/converter.h	/^    conv_loop SustainLoop;$/;"	m	struct:conv_instrument_chunk	typeref:typename:conv_loop
TOTAL_CHUNK_TYPES	./code/converter.h	/^#define TOTAL_CHUNK_TYPES	/;"	d
TOTAL_CHUNK_TYPES	./release/AifConverter/code/converter.h	/^#define TOTAL_CHUNK_TYPES	/;"	d
TOTAL_IMPORTANT_CHUNK_TYPES	./code/converter.h	/^#define TOTAL_IMPORTANT_CHUNK_TYPES /;"	d
TOTAL_IMPORTANT_CHUNK_TYPES	./release/AifConverter/code/converter.h	/^#define TOTAL_IMPORTANT_CHUNK_TYPES /;"	d
TOTAL_KEYWORDS	./code/GperfHash.c	/^#define TOTAL_KEYWORDS /;"	d	file:
TOTAL_KEYWORDS	./release/AifConverter/code/GperfHash.c	/^#define TOTAL_KEYWORDS /;"	d	file:
TotalFillerBytes	./code/converter.h	/^    uint32 TotalFillerBytes;$/;"	m	struct:filler_chunk	typeref:typename:uint32
TotalFillerBytes	./release/AifConverter/code/converter.h	/^    uint32 TotalFillerBytes;$/;"	m	struct:filler_chunk	typeref:typename:uint32
TotalMarkers	./code/converter.h	/^    uint16 TotalMarkers;$/;"	m	struct:aif_marker_chunk	typeref:typename:uint16
TotalMarkers	./code/converter.h	/^    uint16 TotalMarkers;$/;"	m	struct:conv_marker_chunk	typeref:typename:uint16
TotalMarkers	./release/AifConverter/code/converter.h	/^    uint16 TotalMarkers;$/;"	m	struct:aif_marker_chunk	typeref:typename:uint16
TotalMarkers	./release/AifConverter/code/converter.h	/^    uint16 TotalMarkers;$/;"	m	struct:conv_marker_chunk	typeref:typename:uint16
Type	./code/converter.h	/^    uint32 Type;          $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
Type	./release/AifConverter/code/converter.h	/^    uint32 Type;          $/;"	m	struct:wav_sample_loop	typeref:typename:uint32
UnshiftedNote	./code/converter.h	/^    uint8 UnshiftedNote;      \/\/ MIDI root note$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
UnshiftedNote	./release/AifConverter/code/converter.h	/^    uint8 UnshiftedNote;      \/\/ MIDI root note$/;"	m	struct:wav_inst_chunk	typeref:typename:uint8
ValidateAif	./code/converter.cpp	/^ValidateAif(int CountOfEachChunkType[], $/;"	f	typeref:typename:void
ValidateAif	./release/AifConverter/code/converter.cpp	/^ValidateAif(int CountOfEachChunkType[], $/;"	f	typeref:typename:void
ValidateID	./code/converter.cpp	/^ValidateID(char *IDToCheck, char *IDToCheckAgainst, char *CallingFunction)$/;"	f	typeref:typename:void
ValidateID	./release/AifConverter/code/converter.cpp	/^ValidateID(char *IDToCheck, char *IDToCheckAgainst, char *CallingFunction)$/;"	f	typeref:typename:void
ValidateInteger	./code/converter.cpp	/^ValidateInteger(int IntToCheck, $/;"	f	typeref:typename:void
ValidateInteger	./release/AifConverter/code/converter.cpp	/^ValidateInteger(int IntToCheck, $/;"	f	typeref:typename:void
ValidateIntegerRange	./code/converter.cpp	/^ValidateIntegerRange(int IntToCheck, int LowerBound, int UpperBound, char *Variable, char *Calli/;"	f	typeref:typename:void
ValidateIntegerRange	./release/AifConverter/code/converter.cpp	/^ValidateIntegerRange(int IntToCheck, int LowerBound, int UpperBound, char *Variable, char *Calli/;"	f	typeref:typename:void
ValidatePointer	./code/converter.cpp	/^ValidatePointer(uint8 *PointerToCheck, char *CallingFunction)$/;"	f	typeref:typename:void
ValidatePointer	./release/AifConverter/code/converter.cpp	/^ValidatePointer(uint8 *PointerToCheck, char *CallingFunction)$/;"	f	typeref:typename:void
Vid	./data/desktop.ini	/^Vid=$/;"	k	section:ViewState
ViewState	./data/desktop.ini	/^[ViewState]$/;"	s
WAV_FWD_BACK_LOOP	./code/converter.h	/^#define WAV_FWD_BACK_LOOP /;"	d
WAV_FWD_BACK_LOOP	./release/AifConverter/code/converter.h	/^#define WAV_FWD_BACK_LOOP /;"	d
WAV_FWD_LOOP	./code/converter.h	/^#define WAV_FWD_LOOP /;"	d
WAV_FWD_LOOP	./release/AifConverter/code/converter.h	/^#define WAV_FWD_LOOP /;"	d
Win32_AllocateMemory	./code/converter.cpp	/^Win32_AllocateMemory(uint64 MemSize, char *CallingFunction)$/;"	f	typeref:typename:LPVOID
Win32_AllocateMemory	./release/AifConverter/code/converter.cpp	/^Win32_AllocateMemory(uint64 MemSize, char *CallingFunction)$/;"	f	typeref:typename:LPVOID
Win32_GetAifFilePointer	./code/converter.cpp	/^Win32_GetAifFilePointer(LPCSTR Filename, LARGE_INTEGER *Aif_FileSize)$/;"	f	typeref:typename:void *
Win32_GetAifFilePointer	./release/AifConverter/code/converter.cpp	/^Win32_GetAifFilePointer(LPCSTR Filename, LARGE_INTEGER *Aif_FileSize)$/;"	f	typeref:typename:void *
WinMain	./code/OLD_win32_converter.cpp	/^int WinMain(HINSTANCE Instance, $/;"	f	typeref:typename:int
__anon85076c410103	./release/AifConverter/code/converter.h	/^{$/;"	g
__anoncbbdc41a0103	./code/converter.h	/^{$/;"	g
aif_common_chunk	./code/converter.h	/^struct aif_common_chunk$/;"	s
aif_common_chunk	./release/AifConverter/code/converter.h	/^struct aif_common_chunk$/;"	s
aif_form_chunk	./code/converter.h	/^struct aif_form_chunk$/;"	s
aif_form_chunk	./release/AifConverter/code/converter.h	/^struct aif_form_chunk$/;"	s
aif_instrument_chunk	./code/converter.h	/^struct aif_instrument_chunk$/;"	s
aif_instrument_chunk	./release/AifConverter/code/converter.h	/^struct aif_instrument_chunk$/;"	s
aif_loop	./code/converter.h	/^struct aif_loop$/;"	s
aif_loop	./release/AifConverter/code/converter.h	/^struct aif_loop$/;"	s
aif_marker	./code/converter.h	/^struct aif_marker$/;"	s
aif_marker	./release/AifConverter/code/converter.h	/^struct aif_marker$/;"	s
aif_marker_chunk	./code/converter.h	/^struct aif_marker_chunk$/;"	s
aif_marker_chunk	./release/AifConverter/code/converter.h	/^struct aif_marker_chunk$/;"	s
aif_sound_data_chunk	./code/converter.h	/^struct aif_sound_data_chunk$/;"	s
aif_sound_data_chunk	./release/AifConverter/code/converter.h	/^struct aif_sound_data_chunk$/;"	s
arena	./code/converter.h	/^struct arena$/;"	s
arena	./release/AifConverter/code/converter.h	/^struct arena$/;"	s
bool32	./code/converter.h	/^typedef int32 bool32;$/;"	t	typeref:typename:int32
bool32	./release/AifConverter/code/converter.h	/^typedef int32 bool32;$/;"	t	typeref:typename:int32
chunk	./code/converter.h	/^} chunk;$/;"	t	typeref:enum:__anoncbbdc41a0103
chunk	./release/AifConverter/code/converter.h	/^} chunk;$/;"	t	typeref:enum:__anon85076c410103
chunk_finder	./code/converter.h	/^struct chunk_finder$/;"	s
chunk_finder	./release/AifConverter/code/converter.h	/^struct chunk_finder$/;"	s
conv_common_chunk	./code/converter.h	/^struct conv_common_chunk$/;"	s
conv_common_chunk	./release/AifConverter/code/converter.h	/^struct conv_common_chunk$/;"	s
conv_form_chunk	./code/converter.h	/^struct conv_form_chunk$/;"	s
conv_form_chunk	./release/AifConverter/code/converter.h	/^struct conv_form_chunk$/;"	s
conv_instrument_chunk	./code/converter.h	/^struct conv_instrument_chunk$/;"	s
conv_instrument_chunk	./release/AifConverter/code/converter.h	/^struct conv_instrument_chunk$/;"	s
conv_loop	./code/converter.h	/^struct conv_loop$/;"	s
conv_loop	./release/AifConverter/code/converter.h	/^struct conv_loop$/;"	s
conv_marker	./code/converter.h	/^struct conv_marker$/;"	s
conv_marker	./release/AifConverter/code/converter.h	/^struct conv_marker$/;"	s
conv_marker_chunk	./code/converter.h	/^struct conv_marker_chunk$/;"	s
conv_marker_chunk	./release/AifConverter/code/converter.h	/^struct conv_marker_chunk$/;"	s
conv_sound_data_chunk	./code/converter.h	/^struct conv_sound_data_chunk$/;"	s
conv_sound_data_chunk	./release/AifConverter/code/converter.h	/^struct conv_sound_data_chunk$/;"	s
filler_chunk	./code/converter.h	/^struct filler_chunk$/;"	s
filler_chunk	./release/AifConverter/code/converter.h	/^struct filler_chunk$/;"	s
generic_chunk_header	./code/OLD_win32_converter.cpp	/^	struct generic_chunk_header$/;"	s	function:WinMain	file:
generic_chunk_header	./code/converter.h	/^struct generic_chunk_header$/;"	s
generic_chunk_header	./release/AifConverter/code/converter.h	/^struct generic_chunk_header$/;"	s
int16	./code/converter.h	/^typedef int16_t int16;$/;"	t	typeref:typename:int16_t
int16	./release/AifConverter/code/converter.h	/^typedef int16_t int16;$/;"	t	typeref:typename:int16_t
int32	./code/converter.h	/^typedef int32_t int32;$/;"	t	typeref:typename:int32_t
int32	./release/AifConverter/code/converter.h	/^typedef int32_t int32;$/;"	t	typeref:typename:int32_t
int64	./code/converter.h	/^typedef int64_t int64;$/;"	t	typeref:typename:int64_t
int64	./release/AifConverter/code/converter.h	/^typedef int64_t int64;$/;"	t	typeref:typename:int64_t
int8	./code/converter.h	/^typedef int8_t int8;$/;"	t	typeref:typename:int8_t
int8	./release/AifConverter/code/converter.h	/^typedef int8_t int8;$/;"	t	typeref:typename:int8_t
main	./code/win32_converter.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	./release/AifConverter/code/win32_converter.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
static	./code/converter.h	/^#define static /;"	d
static	./release/AifConverter/code/converter.h	/^#define static /;"	d
uint16	./code/converter.h	/^typedef uint16_t uint16;$/;"	t	typeref:typename:uint16_t
uint16	./release/AifConverter/code/converter.h	/^typedef uint16_t uint16;$/;"	t	typeref:typename:uint16_t
uint32	./code/converter.h	/^typedef uint32_t uint32;$/;"	t	typeref:typename:uint32_t
uint32	./release/AifConverter/code/converter.h	/^typedef uint32_t uint32;$/;"	t	typeref:typename:uint32_t
uint64	./code/converter.h	/^typedef uint64_t uint64;$/;"	t	typeref:typename:uint64_t
uint64	./release/AifConverter/code/converter.h	/^typedef uint64_t uint64;$/;"	t	typeref:typename:uint64_t
uint8	./code/converter.h	/^typedef uint8_t uint8;$/;"	t	typeref:typename:uint8_t
uint8	./release/AifConverter/code/converter.h	/^typedef uint8_t uint8;$/;"	t	typeref:typename:uint8_t
wav_data_chunk	./code/converter.h	/^struct wav_data_chunk$/;"	s
wav_data_chunk	./release/AifConverter/code/converter.h	/^struct wav_data_chunk$/;"	s
wav_fmt_chunk	./code/converter.h	/^struct wav_fmt_chunk$/;"	s
wav_fmt_chunk	./release/AifConverter/code/converter.h	/^struct wav_fmt_chunk$/;"	s
wav_inst_chunk	./code/converter.h	/^struct wav_inst_chunk$/;"	s
wav_inst_chunk	./release/AifConverter/code/converter.h	/^struct wav_inst_chunk$/;"	s
wav_riff_chunk	./code/converter.h	/^struct wav_riff_chunk$/;"	s
wav_riff_chunk	./release/AifConverter/code/converter.h	/^struct wav_riff_chunk$/;"	s
wav_sample_loop	./code/converter.h	/^struct wav_sample_loop $/;"	s
wav_sample_loop	./release/AifConverter/code/converter.h	/^struct wav_sample_loop $/;"	s
wav_sampler_chunk	./code/converter.h	/^struct wav_sampler_chunk $/;"	s
wav_sampler_chunk	./release/AifConverter/code/converter.h	/^struct wav_sampler_chunk $/;"	s
