!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	W:/converter/code/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/3e21c2f/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
ArrayCount	./win32_converter.cpp	/^#define ArrayCount(/;"	d	file:
Assert	./win32_converter.cpp	/^#define Assert(/;"	d	file:
BITS_IN_BYTE	./win32_converter.cpp	/^#define BITS_IN_BYTE /;"	d	file:
DataSize	./win32_converter.cpp	/^    int32 DataSize;$/;"	m	struct:common_chunk	typeref:typename:int32	file:
DataSize	./win32_converter.cpp	/^    int32 DataSize;$/;"	m	struct:form_chunk	typeref:typename:int32	file:
DataStart	./win32_converter.cpp	/^    uint64 DataStart;$/;"	m	struct:form_chunk	typeref:typename:uint64	file:
EXTENDED_WIDTH	./win32_converter.cpp	/^#define EXTENDED_WIDTH /;"	d	file:
FlipEndianness	./win32_converter.cpp	/^FlipEndianness(int16 IntToFlip)$/;"	f	typeref:typename:int16
FlipEndianness	./win32_converter.cpp	/^FlipEndianness(int32 IntToFlip)$/;"	f	typeref:typename:int32
FlipEndianness	./win32_converter.cpp	/^FlipEndianness(uint16 IntToFlip)$/;"	f	typeref:typename:uint16
FlipEndianness	./win32_converter.cpp	/^FlipEndianness(uint32 IntToFlip)$/;"	f	typeref:typename:uint32
FlipEndianness	./win32_converter.cpp	/^FlipEndianness(uint64 IntToFlip)$/;"	f	typeref:typename:uint64
GetSampleRate	./win32_converter.cpp	/^GetSampleRate(uint8 *FirstByteOfExtendedPrecisionFloat)$/;"	f	typeref:typename:uint32
HeaderStart	./win32_converter.cpp	/^    uint64 HeaderStart;$/;"	m	struct:common_chunk	typeref:typename:uint64	file:
HeaderStart	./win32_converter.cpp	/^    uint64 HeaderStart;$/;"	m	struct:form_chunk	typeref:typename:uint64	file:
ID	./win32_converter.cpp	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:common_chunk	typeref:typename:char[]	file:
ID	./win32_converter.cpp	/^    char ID[ID_WIDTH + 1];$/;"	m	struct:form_chunk	typeref:typename:char[]	file:
ID_WIDTH	./win32_converter.cpp	/^#define ID_WIDTH /;"	d	file:
NumChannels	./win32_converter.cpp	/^    int16 NumChannels;$/;"	m	struct:common_chunk	typeref:typename:int16	file:
NumSampleFrames	./win32_converter.cpp	/^    uint32 NumSampleFrames;$/;"	m	struct:common_chunk	typeref:typename:uint32	file:
PrintDebugString	./win32_converter.cpp	/^PrintDebugString(int32 i)$/;"	f	typeref:typename:void
ReadChunkAddress	./win32_converter.cpp	/^ReadChunkAddress(uint64 ChunkAddress, common_chunk *CommonChunk)$/;"	f	typeref:typename:void
ReadChunkAddress	./win32_converter.cpp	/^ReadChunkAddress(uint64 ChunkAddress, form_chunk *FormChunk)$/;"	f	typeref:typename:void
ReadChunkDataStart	./win32_converter.cpp	/^ReadChunkDataStart(uint64 ChunkDataStart, form_chunk *ChunkStruct)$/;"	f	typeref:typename:void
ReadChunkID	./win32_converter.cpp	/^ReadChunkID(uint8 *ChunkIDStart, common_chunk *CommonChunk)$/;"	f	typeref:typename:void
ReadChunkID	./win32_converter.cpp	/^ReadChunkID(uint8 *ChunkIDStart, form_chunk *FormChunk)$/;"	f	typeref:typename:void
ReadChunkType	./win32_converter.cpp	/^ReadChunkType(uint8 *ChunkTypeStart, form_chunk *ChunkStruct)$/;"	f	typeref:typename:void
SampleRate	./win32_converter.cpp	/^    uint32 SampleRate;$/;"	m	struct:common_chunk	typeref:typename:uint32	file:
SampleSize	./win32_converter.cpp	/^    int16 SampleSize;$/;"	m	struct:common_chunk	typeref:typename:int16	file:
Type	./win32_converter.cpp	/^    char Type[ID_WIDTH + 1];$/;"	m	struct:form_chunk	typeref:typename:char[]	file:
Win32GetFilePointer	./win32_converter.cpp	/^Win32GetFilePointer(LPCWSTR Filename)$/;"	f	typeref:typename:void *
WinMain	./win32_converter.cpp	/^int WinMain(HINSTANCE Instance, $/;"	f	typeref:typename:int
common_chunk	./win32_converter.cpp	/^struct common_chunk$/;"	s	file:
form_chunk	./win32_converter.cpp	/^struct form_chunk$/;"	s	file:
int16	./win32_converter.cpp	/^typedef int16_t int16;$/;"	t	typeref:typename:int16_t	file:
int32	./win32_converter.cpp	/^typedef int32_t int32;$/;"	t	typeref:typename:int32_t	file:
int64	./win32_converter.cpp	/^typedef int64_t int64;$/;"	t	typeref:typename:int64_t	file:
int8	./win32_converter.cpp	/^typedef int8_t int8;$/;"	t	typeref:typename:int8_t	file:
uint16	./win32_converter.cpp	/^typedef uint16_t uint16;$/;"	t	typeref:typename:uint16_t	file:
uint32	./win32_converter.cpp	/^typedef uint32_t uint32;$/;"	t	typeref:typename:uint32_t	file:
uint64	./win32_converter.cpp	/^typedef uint64_t uint64;$/;"	t	typeref:typename:uint64_t	file:
uint8	./win32_converter.cpp	/^typedef uint8_t uint8;$/;"	t	typeref:typename:uint8_t	file:
